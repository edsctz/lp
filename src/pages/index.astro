---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import PropertySearch from '../components/PropertySearch.astro';
import Services from '../components/Services.astro';
import Testimonials from '../components/Testimonials.astro';
import Footer from '../components/Footer.astro';
---

<Layout 
  title="Century 21 Alpha | Imobiliária em Alphaville - Compra, Venda e Locação"
  description="Century 21 Alpha, sua imobiliária especializada em Alphaville. Compra, venda, aluguel e avaliação de imóveis em Alphaville e região com os melhores profissionais do mercado."
>
  <Header />
  <main>
    <Hero cityName="Alphaville" />
    <PropertySearch />
    <Services />
    <Testimonials />
  </main>
  <Footer />
</Layout>

<script>
// @ts-nocheck
  // Intersection Observer for animations on scroll
  document.addEventListener('DOMContentLoaded', () => {
    const animateElements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
        }
      });
    }, { threshold: 0.1 });
    
    animateElements.forEach(element => {
      observer.observe(element);
    });
    
    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach((anchor: Element) => {
      anchor.addEventListener('click', (e: Event) => {
        e.preventDefault();
        
        const targetId = (anchor as HTMLAnchorElement).getAttribute('href');
        if (targetId === '#') return;
        
        const targetElement = document.querySelector(targetId);
        if (!targetElement) return;
        
        const headerOffset = 80; // Adjust based on your header height
        const elementPosition = targetElement.getBoundingClientRect().top;
        const offsetPosition = elementPosition + window.scrollY - headerOffset;
        
        // Use simpler scrollTo syntax to avoid TypeScript errors
        window.scrollTo(0, offsetPosition);
      });
    });
    
    // Handle form submissions (except PropertySearch form which has its own handler)
    const forms = document.querySelectorAll('form:not(#property-search-step1):not(#property-search-step2)');
    forms.forEach((form: Element) => {
      form.addEventListener('submit', (e: Event) => {
        e.preventDefault();
        
        // In a real application, you would send the form data to a server
        // Here we're just preventing the default behavior
        
        // Create and show inline success message instead of alert
        const successMessage = document.createElement('div');
        successMessage.className = 'mt-4 p-4 bg-green-50 border border-green-200 rounded-lg text-green-800';
        successMessage.innerHTML = `
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
            <span class="font-medium">Formulário enviado com sucesso! Em breve entraremos em contato.</span>
          </div>
        `;
        
        // Add success message after the form
        if (form.parentNode) {
          form.parentNode.insertBefore(successMessage, form.nextSibling);
        }
        
        // Reset form
        (form as HTMLFormElement).reset();
        
        // Remove success message after 5 seconds
        setTimeout(() => {
          successMessage.remove();
        }, 5000);
      });
    });
  });
</script>
